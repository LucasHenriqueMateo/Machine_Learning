{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.15","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"tpu1vmV38","dataSources":[{"sourceId":1940,"sourceType":"datasetVersion","datasetId":1069}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/lucashmateo/financial-fraud-detection?scriptVersionId=208875042\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"### Download","metadata":{}},{"cell_type":"code","source":"import kagglehub\n\n# Download latest version\npath = kagglehub.dataset_download(\"ealaxi/paysim1\")\n\nprint(\"Path to dataset files:\", path)","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:29:11.254949Z","iopub.execute_input":"2024-11-21T18:29:11.255313Z","iopub.status.idle":"2024-11-21T18:29:12.260794Z","shell.execute_reply.started":"2024-11-21T18:29:11.255283Z","shell.execute_reply":"2024-11-21T18:29:12.25962Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n","output_type":"stream"},{"name":"stdout","text":"Path to dataset files: /kaggle/input/paysim1\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"pip install imbalanced-learn","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:29:12.263148Z","iopub.execute_input":"2024-11-21T18:29:12.263539Z","iopub.status.idle":"2024-11-21T18:29:16.92761Z","shell.execute_reply.started":"2024-11-21T18:29:12.263497Z","shell.execute_reply":"2024-11-21T18:29:16.926579Z"}},"outputs":[{"name":"stdout","text":"Collecting imbalanced-learn\n  Downloading imbalanced_learn-0.12.4-py3-none-any.whl (258 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m258.3/258.3 kB\u001b[0m \u001b[31m7.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hRequirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/site-packages (from imbalanced-learn) (3.5.0)\nRequirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/site-packages (from imbalanced-learn) (1.4.2)\nRequirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.10/site-packages (from imbalanced-learn) (1.26.4)\nRequirement already satisfied: scipy>=1.5.0 in /usr/local/lib/python3.10/site-packages (from imbalanced-learn) (1.14.1)\nRequirement already satisfied: scikit-learn>=1.0.2 in /usr/local/lib/python3.10/site-packages (from imbalanced-learn) (1.5.2)\nInstalling collected packages: imbalanced-learn\nSuccessfully installed imbalanced-learn-0.12.4\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.3.1\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"pip install xgboost","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:29:16.929262Z","iopub.execute_input":"2024-11-21T18:29:16.929703Z","iopub.status.idle":"2024-11-21T18:29:26.471294Z","shell.execute_reply.started":"2024-11-21T18:29:16.929656Z","shell.execute_reply":"2024-11-21T18:29:26.470386Z"}},"outputs":[{"name":"stdout","text":"Collecting xgboost\n  Downloading xgboost-2.1.2-py3-none-manylinux_2_28_x86_64.whl (153.9 MB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m153.9/153.9 MB\u001b[0m \u001b[31m5.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hRequirement already satisfied: nvidia-nccl-cu12 in /usr/local/lib/python3.10/site-packages (from xgboost) (2.20.5)\nRequirement already satisfied: scipy in /usr/local/lib/python3.10/site-packages (from xgboost) (1.14.1)\nRequirement already satisfied: numpy in /usr/local/lib/python3.10/site-packages (from xgboost) (1.26.4)\nInstalling collected packages: xgboost\nSuccessfully installed xgboost-2.1.2\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.3.1\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"pip install lightgbm","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:29:26.472551Z","iopub.execute_input":"2024-11-21T18:29:26.472812Z","iopub.status.idle":"2024-11-21T18:29:31.379077Z","shell.execute_reply.started":"2024-11-21T18:29:26.472786Z","shell.execute_reply":"2024-11-21T18:29:31.378177Z"}},"outputs":[{"name":"stdout","text":"Collecting lightgbm\n  Downloading lightgbm-4.5.0-py3-none-manylinux_2_28_x86_64.whl (3.6 MB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.6/3.6 MB\u001b[0m \u001b[31m26.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[?25hRequirement already satisfied: numpy>=1.17.0 in /usr/local/lib/python3.10/site-packages (from lightgbm) (1.26.4)\nRequirement already satisfied: scipy in /usr/local/lib/python3.10/site-packages (from lightgbm) (1.14.1)\nInstalling collected packages: lightgbm\nSuccessfully installed lightgbm-4.5.0\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.3.1\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":4},{"cell_type":"markdown","source":"### Import","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, StandardScaler\nfrom sklearn.feature_extraction import FeatureHasher\nfrom imblearn.over_sampling import SMOTE","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:29:31.381521Z","iopub.execute_input":"2024-11-21T18:29:31.382108Z","iopub.status.idle":"2024-11-21T18:29:36.063482Z","shell.execute_reply.started":"2024-11-21T18:29:31.382076Z","shell.execute_reply":"2024-11-21T18:29:36.062264Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"# Display settings\npd.set_option('display.float_format', '{:.2f}'.format)\nsns.set(style=\"whitegrid\")\n\n# Plotting settings\nplt.rcParams['figure.figsize'] = (10, 6)\nplt.rcParams['axes.titlesize'] = 14\nplt.rcParams['axes.labelsize'] = 12\nplt.rcParams['xtick.labelsize'] = 10\nplt.rcParams['ytick.labelsize'] = 10","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:29:36.064769Z","iopub.execute_input":"2024-11-21T18:29:36.065211Z","iopub.status.idle":"2024-11-21T18:29:36.070872Z","shell.execute_reply.started":"2024-11-21T18:29:36.065182Z","shell.execute_reply":"2024-11-21T18:29:36.069923Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"# Load the dataset\nfile_path = \"/kaggle/input/paysim1/PS_20174392719_1491204439457_log.csv\"\ndf = pd.read_csv(file_path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:29:36.072177Z","iopub.execute_input":"2024-11-21T18:29:36.072448Z","iopub.status.idle":"2024-11-21T18:29:50.989981Z","shell.execute_reply.started":"2024-11-21T18:29:36.072421Z","shell.execute_reply":"2024-11-21T18:29:50.988998Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:29:50.991208Z","iopub.execute_input":"2024-11-21T18:29:50.991487Z","iopub.status.idle":"2024-11-21T18:29:51.010436Z","shell.execute_reply.started":"2024-11-21T18:29:50.991461Z","shell.execute_reply":"2024-11-21T18:29:51.009693Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"   step      type   amount     nameOrig  oldbalanceOrg  newbalanceOrig  \\\n0     1   PAYMENT  9839.64  C1231006815      170136.00       160296.36   \n1     1   PAYMENT  1864.28  C1666544295       21249.00        19384.72   \n2     1  TRANSFER   181.00  C1305486145         181.00            0.00   \n3     1  CASH_OUT   181.00   C840083671         181.00            0.00   \n4     1   PAYMENT 11668.14  C2048537720       41554.00        29885.86   \n\n      nameDest  oldbalanceDest  newbalanceDest  isFraud  isFlaggedFraud  \n0  M1979787155            0.00            0.00        0               0  \n1  M2044282225            0.00            0.00        0               0  \n2   C553264065            0.00            0.00        1               0  \n3    C38997010        21182.00            0.00        1               0  \n4  M1230701703            0.00            0.00        0               0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>step</th>\n      <th>type</th>\n      <th>amount</th>\n      <th>nameOrig</th>\n      <th>oldbalanceOrg</th>\n      <th>newbalanceOrig</th>\n      <th>nameDest</th>\n      <th>oldbalanceDest</th>\n      <th>newbalanceDest</th>\n      <th>isFraud</th>\n      <th>isFlaggedFraud</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>PAYMENT</td>\n      <td>9839.64</td>\n      <td>C1231006815</td>\n      <td>170136.00</td>\n      <td>160296.36</td>\n      <td>M1979787155</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>PAYMENT</td>\n      <td>1864.28</td>\n      <td>C1666544295</td>\n      <td>21249.00</td>\n      <td>19384.72</td>\n      <td>M2044282225</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>TRANSFER</td>\n      <td>181.00</td>\n      <td>C1305486145</td>\n      <td>181.00</td>\n      <td>0.00</td>\n      <td>C553264065</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>CASH_OUT</td>\n      <td>181.00</td>\n      <td>C840083671</td>\n      <td>181.00</td>\n      <td>0.00</td>\n      <td>C38997010</td>\n      <td>21182.00</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>PAYMENT</td>\n      <td>11668.14</td>\n      <td>C2048537720</td>\n      <td>41554.00</td>\n      <td>29885.86</td>\n      <td>M1230701703</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":8},{"cell_type":"markdown","source":"# Dataset Overview","metadata":{}},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:29:51.011465Z","iopub.execute_input":"2024-11-21T18:29:51.011701Z","iopub.status.idle":"2024-11-21T18:29:51.021272Z","shell.execute_reply.started":"2024-11-21T18:29:51.011676Z","shell.execute_reply":"2024-11-21T18:29:51.020435Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 6362620 entries, 0 to 6362619\nData columns (total 11 columns):\n #   Column          Dtype  \n---  ------          -----  \n 0   step            int64  \n 1   type            object \n 2   amount          float64\n 3   nameOrig        object \n 4   oldbalanceOrg   float64\n 5   newbalanceOrig  float64\n 6   nameDest        object \n 7   oldbalanceDest  float64\n 8   newbalanceDest  float64\n 9   isFraud         int64  \n 10  isFlaggedFraud  int64  \ndtypes: float64(5), int64(3), object(3)\nmemory usage: 534.0+ MB\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"# Select only numeric columns for checking infinite values\nnumeric_df = df.select_dtypes(include=[np.number])\n\n# Check for columns with inf or -inf values\ninfinite_columns = numeric_df.columns.to_series()[np.isinf(numeric_df).any()]\nif not infinite_columns.empty:\n    print(\"Columns with infinite values:\", infinite_columns.index.tolist())\nelse:\n    print(\"No columns with infinite values.\")\n\n# Check for columns with NaN values in numeric columns\nnan_columns = numeric_df.columns[numeric_df.isna().any()].tolist()\nif nan_columns:\n    print(\"Columns with NaN values:\", nan_columns)\nelse:\n    print(\"No columns with NaN values.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:29:51.022266Z","iopub.execute_input":"2024-11-21T18:29:51.022522Z","iopub.status.idle":"2024-11-21T18:29:51.253794Z","shell.execute_reply.started":"2024-11-21T18:29:51.022496Z","shell.execute_reply":"2024-11-21T18:29:51.2528Z"}},"outputs":[{"name":"stdout","text":"No columns with infinite values.\nNo columns with NaN values.\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"# Check for duplicate rows\nduplicate_rows = df.duplicated().sum()\nprint(f\"Number of duplicate rows: {duplicate_rows}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:29:51.255038Z","iopub.execute_input":"2024-11-21T18:29:51.255309Z","iopub.status.idle":"2024-11-21T18:30:02.148586Z","shell.execute_reply.started":"2024-11-21T18:29:51.255282Z","shell.execute_reply":"2024-11-21T18:30:02.147519Z"}},"outputs":[{"name":"stdout","text":"Number of duplicate rows: 0\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"# Descriptive statistics\ndf.describe().T","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:30:02.149769Z","iopub.execute_input":"2024-11-21T18:30:02.150071Z","iopub.status.idle":"2024-11-21T18:30:03.926614Z","shell.execute_reply.started":"2024-11-21T18:30:02.150043Z","shell.execute_reply":"2024-11-21T18:30:03.925708Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"                    count       mean        std  min      25%       50%  \\\nstep           6362620.00     243.40     142.33 1.00   156.00    239.00   \namount         6362620.00  179861.90  603858.23 0.00 13389.57  74871.94   \noldbalanceOrg  6362620.00  833883.10 2888242.67 0.00     0.00  14208.00   \nnewbalanceOrig 6362620.00  855113.67 2924048.50 0.00     0.00      0.00   \noldbalanceDest 6362620.00 1100701.67 3399180.11 0.00     0.00 132705.66   \nnewbalanceDest 6362620.00 1224996.40 3674128.94 0.00     0.00 214661.44   \nisFraud        6362620.00       0.00       0.04 0.00     0.00      0.00   \nisFlaggedFraud 6362620.00       0.00       0.00 0.00     0.00      0.00   \n\n                      75%          max  \nstep               335.00       743.00  \namount          208721.48  92445516.64  \noldbalanceOrg   107315.18  59585040.37  \nnewbalanceOrig  144258.41  49585040.37  \noldbalanceDest  943036.71 356015889.35  \nnewbalanceDest 1111909.25 356179278.92  \nisFraud              0.00         1.00  \nisFlaggedFraud       0.00         1.00  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>step</th>\n      <td>6362620.00</td>\n      <td>243.40</td>\n      <td>142.33</td>\n      <td>1.00</td>\n      <td>156.00</td>\n      <td>239.00</td>\n      <td>335.00</td>\n      <td>743.00</td>\n    </tr>\n    <tr>\n      <th>amount</th>\n      <td>6362620.00</td>\n      <td>179861.90</td>\n      <td>603858.23</td>\n      <td>0.00</td>\n      <td>13389.57</td>\n      <td>74871.94</td>\n      <td>208721.48</td>\n      <td>92445516.64</td>\n    </tr>\n    <tr>\n      <th>oldbalanceOrg</th>\n      <td>6362620.00</td>\n      <td>833883.10</td>\n      <td>2888242.67</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>14208.00</td>\n      <td>107315.18</td>\n      <td>59585040.37</td>\n    </tr>\n    <tr>\n      <th>newbalanceOrig</th>\n      <td>6362620.00</td>\n      <td>855113.67</td>\n      <td>2924048.50</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>144258.41</td>\n      <td>49585040.37</td>\n    </tr>\n    <tr>\n      <th>oldbalanceDest</th>\n      <td>6362620.00</td>\n      <td>1100701.67</td>\n      <td>3399180.11</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>132705.66</td>\n      <td>943036.71</td>\n      <td>356015889.35</td>\n    </tr>\n    <tr>\n      <th>newbalanceDest</th>\n      <td>6362620.00</td>\n      <td>1224996.40</td>\n      <td>3674128.94</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>214661.44</td>\n      <td>1111909.25</td>\n      <td>356179278.92</td>\n    </tr>\n    <tr>\n      <th>isFraud</th>\n      <td>6362620.00</td>\n      <td>0.00</td>\n      <td>0.04</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>1.00</td>\n    </tr>\n    <tr>\n      <th>isFlaggedFraud</th>\n      <td>6362620.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>1.00</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":12},{"cell_type":"markdown","source":"# EDA","metadata":{}},{"cell_type":"markdown","source":"## Q1. What types of transactions appear in the dataset and what are their frequencies?","metadata":{}},{"cell_type":"code","source":"# Count the occurrences of each transaction type\ntransaction_counts = df['type'].value_counts()\n\n# Plot the distribution of transaction types\nsns.barplot(x=transaction_counts.index, y=transaction_counts.values, palette=\"viridis\")\nplt.title(\"Distribution of Transaction Types\")\nplt.xlabel(\"Transaction Type\")\nplt.ylabel(\"Frequency\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:30:03.927765Z","iopub.execute_input":"2024-11-21T18:30:03.928061Z","iopub.status.idle":"2024-11-21T18:30:04.549803Z","shell.execute_reply.started":"2024-11-21T18:30:03.928033Z","shell.execute_reply":"2024-11-21T18:30:04.548915Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_13/1043346185.py:5: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(x=transaction_counts.index, y=transaction_counts.values, palette=\"viridis\")\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":13},{"cell_type":"markdown","source":"**Insight**\n\nThe most common transaction types are `CASH_OUT` and `PAYMENT`, while `TRANSFER` and `DEBIT` are less frequent\n\nThis pattern might suggest that frauds are more likely to occur in specific transaction types (such as `CASH_OUT` or `TRANSFER`), as these offer ways to withdraw or move funds.\r\n","metadata":{}},{"cell_type":"markdown","source":"## Q2: What types of transactions are most susceptible to fraud (isFraud)?","metadata":{}},{"cell_type":"code","source":"# Calculate the fraud rate for each transaction type\nfraud_by_type = df.groupby('type')['isFraud'].mean()\n\n# Plot the fraud rate by transaction type\nsns.barplot(x=fraud_by_type.index, y=fraud_by_type.values, palette=\"coolwarm\")\nplt.title(\"Fraud Rate by Transaction Type\")\nplt.xlabel(\"Transaction Type\")\nplt.ylabel(\"Fraud Rate\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:30:04.553593Z","iopub.execute_input":"2024-11-21T18:30:04.553915Z","iopub.status.idle":"2024-11-21T18:30:05.256376Z","shell.execute_reply.started":"2024-11-21T18:30:04.553882Z","shell.execute_reply":"2024-11-21T18:30:05.255537Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_13/3203392151.py:5: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(x=fraud_by_type.index, y=fraud_by_type.values, palette=\"coolwarm\")\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":14},{"cell_type":"markdown","source":"**Insight**\n\nIt appears that the fraud rates for all transaction types are extremely low, with the highest fraud rate being 1% for `TRANSFER`. This suggests that fraud is relatively rare across all transaction types, but `TRANSFER` might be slightly more susceptible to fraudulent activity compared to others. \r\n\r\nGiven the very low fraud rates, this indicates a highly imbalanced dataset, which is typical in fraud detection problems. This will require techniques like oversampling or anomaly detection during model training to properly identify fraudulent transactions.\r\n","metadata":{}},{"cell_type":"markdown","source":"## Q3: What is the distribution ofamounts in fraudulent vs. non-fraudulent transactions?","metadata":{}},{"cell_type":"code","source":"# Plot the distribution of transaction amounts for fraudulent vs non-fraudulent transactions\nplt.figure(figsize=(10, 6))\nsns.kdeplot(df[df['isFraud'] == 0]['amount'], label=\"Non-Fraudulent\", shade=True, color=\"blue\")\nsns.kdeplot(df[df['isFraud'] == 1]['amount'], label=\"Fraudulent\", shade=True, color=\"red\")\nplt.title(\"Distribution of Transaction Amounts (Fraudulent vs Non-Fraudulent)\")\nplt.xlabel(\"Transaction Amount\")\nplt.ylabel(\"Density\")\nplt.legend()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:30:05.257392Z","iopub.execute_input":"2024-11-21T18:30:05.257661Z","iopub.status.idle":"2024-11-21T18:30:29.628412Z","shell.execute_reply.started":"2024-11-21T18:30:05.257635Z","shell.execute_reply":"2024-11-21T18:30:29.627557Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_13/241812964.py:3: FutureWarning: \n\n`shade` is now deprecated in favor of `fill`; setting `fill=True`.\nThis will become an error in seaborn v0.14.0; please update your code.\n\n  sns.kdeplot(df[df['isFraud'] == 0]['amount'], label=\"Non-Fraudulent\", shade=True, color=\"blue\")\n/tmp/ipykernel_13/241812964.py:4: FutureWarning: \n\n`shade` is now deprecated in favor of `fill`; setting `fill=True`.\nThis will become an error in seaborn v0.14.0; please update your code.\n\n  sns.kdeplot(df[df['isFraud'] == 1]['amount'], label=\"Fraudulent\", shade=True, color=\"red\")\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":15},{"cell_type":"markdown","source":"Insight:\n\nFraudulent transactions have significantly higher amounts compared to non-fraudulent ones\n\n- **Non-Fraudulent Transactions**: The distribution is highly skewed due to the presence of some extremely large transactions.\r\n- **Fraudulent Transactions**: The values for fraudulent transactions are higher. This indicates that fraudsters tend to focus on much larger transactions.","metadata":{}},{"cell_type":"markdown","source":"## Q4: Are there any balance characteristics associated with fraud?","metadata":{}},{"cell_type":"code","source":"# Create a boxplot to compare the balances (old and new) for fraudulent vs non-fraudulent transactions\nplt.figure(figsize=(12, 8))\n\n# Old balance of the origin account\nplt.subplot(2, 2, 1)\nsns.boxplot(x='isFraud', y='oldbalanceOrg', data=df, palette=\"coolwarm\")\nplt.title(\"Old Balance (Origin Account)\")\n\n# New balance of the origin account\nplt.subplot(2, 2, 2)\nsns.boxplot(x='isFraud', y='newbalanceOrig', data=df, palette=\"coolwarm\")\nplt.title(\"New Balance (Origin Account)\")\n\n# Old balance of the destination account\nplt.subplot(2, 2, 3)\nsns.boxplot(x='isFraud', y='oldbalanceDest', data=df, palette=\"coolwarm\")\nplt.title(\"Old Balance (Destination Account)\")\n\n# New balance of the destination account\nplt.subplot(2, 2, 4)\nsns.boxplot(x='isFraud', y='newbalanceDest', data=df, palette=\"coolwarm\")\nplt.title(\"New Balance (Destination Account)\")\n\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:30:29.629627Z","iopub.execute_input":"2024-11-21T18:30:29.629925Z","iopub.status.idle":"2024-11-21T18:31:24.784284Z","shell.execute_reply.started":"2024-11-21T18:30:29.629899Z","shell.execute_reply":"2024-11-21T18:31:24.783378Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_13/50493948.py:6: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(x='isFraud', y='oldbalanceOrg', data=df, palette=\"coolwarm\")\n/tmp/ipykernel_13/50493948.py:11: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(x='isFraud', y='newbalanceOrig', data=df, palette=\"coolwarm\")\n/tmp/ipykernel_13/50493948.py:16: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(x='isFraud', y='oldbalanceDest', data=df, palette=\"coolwarm\")\n/tmp/ipykernel_13/50493948.py:21: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(x='isFraud', y='newbalanceDest', data=df, palette=\"coolwarm\")\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x800 with 4 Axes>","image/png":""},"metadata":{}}],"execution_count":16},{"cell_type":"markdown","source":"**Insights**\n\n- **Origin account balances**: Fraudulent transactions tend to involve higher starting balances, especially in the \"old balance\" of the origin account. Non-fraudulent transactions have a wider range, including many transactions with very low starting balances.\r\n  \r\n- **Destination account balances**: Similar patterns are seen in the destination account balances. Fraudulent transactions also appear to involve accounts with higher balances.\r\n\r\n- **Changes in balances**: Fraudulent transactions show more drastic changes in balances, particularly in the destination account, where there are more significant increases in the \"new balance.\"\r\n\r\nThese insights suggest that fraudulent transactions are often associated with larger account balances and more significant balance changes, which can be key features to focus on during fraud detection modeling.\r\n","metadata":{}},{"cell_type":"markdown","source":"## Q5: How are fraudulent transactions distributed over time (steps)?","metadata":{}},{"cell_type":"code","source":"# Create a new column representing the day (each 24-hour period in the step count)\ndf['day'] = df['step'] // 24\n\n# Group fraudulent transactions by day\nfraud_per_day = df[df['isFraud'] == 1].groupby('day').size()\n\n# Plot the fraudulent transactions per day\nplt.figure(figsize=(12, 6))\nfraud_per_day.plot(kind='line', color='gray', linewidth=2)\nplt.title(\"Number of Fraudulent Transactions Per Day\")\nplt.xlabel(\"Day\")\nplt.ylabel(\"Number of Fraudulent Transactions\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:31:24.785457Z","iopub.execute_input":"2024-11-21T18:31:24.785747Z","iopub.status.idle":"2024-11-21T18:31:25.276161Z","shell.execute_reply.started":"2024-11-21T18:31:24.78572Z","shell.execute_reply":"2024-11-21T18:31:25.275345Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":17},{"cell_type":"markdown","source":"**Insights**\n\n- **Consistent Fraud Levels**: Fraudulent transaction counts remain stable across days, indicating steady fraud activity without significant daily fluctuations.\r\n\r\n- **Uniform Fraud Distribution**: The absence of extreme peaks or drops suggests that fraudulent activity is evenly distributed, possibly reflecting realistic, continuous fraud attempts rather than event-based spike.\r\n","metadata":{}},{"cell_type":"markdown","source":"## Correlation Analysis","metadata":{}},{"cell_type":"code","source":"# Select only numerical columns for correlation calculation\nnumeric_cols = df.select_dtypes(include=['float64', 'int64']).columns\n\n# Compute the correlation matrix only for numeric columns\ncorrelation_matrix = df[numeric_cols].corr()\n\n# Plotting the correlation matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(12, 8))\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)\nplt.title(\"Correlation Matrix\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:31:25.277279Z","iopub.execute_input":"2024-11-21T18:31:25.277551Z","iopub.status.idle":"2024-11-21T18:31:28.296727Z","shell.execute_reply.started":"2024-11-21T18:31:25.277526Z","shell.execute_reply":"2024-11-21T18:31:28.29561Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x800 with 2 Axes>","image/png":""},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"# Select only numerical columns for correlation calculation\nnumeric_cols = df.select_dtypes(include=['float64', 'int64']).columns\n\n# Compute the correlation matrix only for numeric columns\ncorrelation_matrix = df[numeric_cols].corr()\n\n# Show the correlation matrix\nprint(correlation_matrix)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:31:28.298031Z","iopub.execute_input":"2024-11-21T18:31:28.298309Z","iopub.status.idle":"2024-11-21T18:31:30.345683Z","shell.execute_reply.started":"2024-11-21T18:31:28.298284Z","shell.execute_reply":"2024-11-21T18:31:30.344744Z"}},"outputs":[{"name":"stdout","text":"                step  amount  oldbalanceOrg  newbalanceOrig  oldbalanceDest  \\\nstep            1.00    0.02          -0.01           -0.01            0.03   \namount          0.02    1.00          -0.00           -0.01            0.29   \noldbalanceOrg  -0.01   -0.00           1.00            1.00            0.07   \nnewbalanceOrig -0.01   -0.01           1.00            1.00            0.07   \noldbalanceDest  0.03    0.29           0.07            0.07            1.00   \nnewbalanceDest  0.03    0.46           0.04            0.04            0.98   \nisFraud         0.03    0.08           0.01           -0.01           -0.01   \nisFlaggedFraud  0.00    0.01           0.00            0.00           -0.00   \nday             1.00    0.02          -0.01           -0.01            0.03   \n\n                newbalanceDest  isFraud  isFlaggedFraud   day  \nstep                      0.03     0.03            0.00  1.00  \namount                    0.46     0.08            0.01  0.02  \noldbalanceOrg             0.04     0.01            0.00 -0.01  \nnewbalanceOrig            0.04    -0.01            0.00 -0.01  \noldbalanceDest            0.98    -0.01           -0.00  0.03  \nnewbalanceDest            1.00     0.00           -0.00  0.03  \nisFraud                   0.00     1.00            0.04  0.03  \nisFlaggedFraud           -0.00     0.04            1.00  0.00  \nday                       0.03     0.03            0.00  1.00  \n","output_type":"stream"}],"execution_count":19},{"cell_type":"markdown","source":"**Insights**\n\n- `oldbalanceDest` and `newbalanceDest` are highly correlated (0.98), suggesting they capture similar information\n  \n- `amount` has moderate correlation with `newbalanceDest` (0.46), indicating that higher transaction amounts tend to correlate with higher destination balances\n  \n- No significant correlation between `isFraud` and other variables, which suggests fraud detection is not easily linked to balance amounts alone","metadata":{}},{"cell_type":"markdown","source":"# Feature Engineering","metadata":{}},{"cell_type":"code","source":"# Creating new feature: balance difference for origin (oldbalanceOrg - newbalanceOrig)\ndf['balance_diff_orig'] = df['oldbalanceOrg'] - df['newbalanceOrig']\n\n# Creating new feature: balance difference for destination (oldbalanceDest - newbalanceDest)\ndf['balance_diff_dest'] = df['oldbalanceDest'] - df['newbalanceDest']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:31:30.346892Z","iopub.execute_input":"2024-11-21T18:31:30.347206Z","iopub.status.idle":"2024-11-21T18:31:30.431528Z","shell.execute_reply.started":"2024-11-21T18:31:30.347177Z","shell.execute_reply":"2024-11-21T18:31:30.430531Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"# Creating new feature: rate of balance change for origin\ndf['balance_change_rate_orig'] = (df['oldbalanceOrg'] - df['newbalanceOrig']) / df['oldbalanceOrg']\n\n# Creating new feature: rate of balance change for destination\ndf['balance_change_rate_dest'] = (df['oldbalanceDest'] - df['newbalanceDest']) / df['oldbalanceDest']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:31:30.432749Z","iopub.execute_input":"2024-11-21T18:31:30.433084Z","iopub.status.idle":"2024-11-21T18:31:30.559561Z","shell.execute_reply.started":"2024-11-21T18:31:30.43305Z","shell.execute_reply":"2024-11-21T18:31:30.558383Z"}},"outputs":[],"execution_count":21},{"cell_type":"code","source":"# Counting the number of transactions for each customer (nameOrig and nameDest)\ndf['trans_count_orig'] = df.groupby('nameOrig')['step'].transform('count')\ndf['trans_count_dest'] = df.groupby('nameDest')['step'].transform('count')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:31:30.560971Z","iopub.execute_input":"2024-11-21T18:31:30.56132Z","iopub.status.idle":"2024-11-21T18:31:56.939528Z","shell.execute_reply.started":"2024-11-21T18:31:30.561283Z","shell.execute_reply":"2024-11-21T18:31:56.938564Z"}},"outputs":[],"execution_count":22},{"cell_type":"markdown","source":"# Preprocessing","metadata":{}},{"cell_type":"code","source":"# One-Hot Encode only 'type', which has limited categories\ndf = pd.get_dummies(df, columns=['type'], drop_first=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:31:56.940735Z","iopub.execute_input":"2024-11-21T18:31:56.941025Z","iopub.status.idle":"2024-11-21T18:31:59.123757Z","shell.execute_reply.started":"2024-11-21T18:31:56.940997Z","shell.execute_reply":"2024-11-21T18:31:59.122791Z"}},"outputs":[],"execution_count":23},{"cell_type":"code","source":"# Label Encoding for high-cardinality 'nameOrig' and 'nameDest'\nle_nameOrig = LabelEncoder()\nle_nameDest = LabelEncoder()\ndf['nameOrig_encoded'] = le_nameOrig.fit_transform(df['nameOrig'])\ndf['nameDest_encoded'] = le_nameDest.fit_transform(df['nameDest'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:31:59.12506Z","iopub.execute_input":"2024-11-21T18:31:59.125367Z","iopub.status.idle":"2024-11-21T18:32:44.078549Z","shell.execute_reply.started":"2024-11-21T18:31:59.125338Z","shell.execute_reply":"2024-11-21T18:32:44.077255Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"# Drop the original columns to save memory\ndf.drop(columns=['nameOrig', 'nameDest'], inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:32:44.079892Z","iopub.execute_input":"2024-11-21T18:32:44.080245Z","iopub.status.idle":"2024-11-21T18:32:44.49377Z","shell.execute_reply.started":"2024-11-21T18:32:44.080201Z","shell.execute_reply":"2024-11-21T18:32:44.492705Z"}},"outputs":[],"execution_count":25},{"cell_type":"code","source":"import numpy as np\nfrom sklearn.preprocessing import StandardScaler\n\n# Replace infinite values with NaN\ndf.replace([np.inf, -np.inf], np.nan, inplace=True)\n\n# Fill NaNs in rate features with 0 as a neutral balance change\ndf['balance_change_rate_orig'].fillna(0, inplace=True)\ndf['balance_change_rate_dest'].fillna(0, inplace=True)\n\n# List of numerical features to scale\nnumerical_features = ['step', 'amount', 'oldbalanceOrg', 'newbalanceOrig', 'oldbalanceDest', \n                      'newbalanceDest', 'balance_diff_orig', 'balance_diff_dest', \n                      'balance_change_rate_orig', 'balance_change_rate_dest']\n\n# Scale numerical features to ensure standardized values\nscaler = StandardScaler()\ndf[numerical_features] = scaler.fit_transform(df[numerical_features])\n\nprint(\"Preprocessing complete, scaling applied successfully.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:32:44.494981Z","iopub.execute_input":"2024-11-21T18:32:44.495256Z","iopub.status.idle":"2024-11-21T18:32:46.714457Z","shell.execute_reply.started":"2024-11-21T18:32:44.495229Z","shell.execute_reply":"2024-11-21T18:32:46.713432Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_13/1078292272.py:8: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df['balance_change_rate_orig'].fillna(0, inplace=True)\n/tmp/ipykernel_13/1078292272.py:9: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df['balance_change_rate_dest'].fillna(0, inplace=True)\n","output_type":"stream"},{"name":"stdout","text":"Preprocessing complete, scaling applied successfully.\n","output_type":"stream"}],"execution_count":26},{"cell_type":"code","source":"# Step 4: Data balancing using SMOTE for the target variable 'isFraud'\nX = df.drop(columns=['isFraud'])\ny = df['isFraud']\n\nsmote = SMOTE(random_state=42)\nX_balanced, y_balanced = smote.fit_resample(X, y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:32:46.715719Z","iopub.execute_input":"2024-11-21T18:32:46.716016Z","iopub.status.idle":"2024-11-21T18:32:56.357047Z","shell.execute_reply.started":"2024-11-21T18:32:46.715989Z","shell.execute_reply":"2024-11-21T18:32:56.356019Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"# Combine balanced X and y into a single DataFrame\ndf_balanced = pd.concat([X_balanced, y_balanced], axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:32:56.358244Z","iopub.execute_input":"2024-11-21T18:32:56.358539Z","iopub.status.idle":"2024-11-21T18:32:58.205317Z","shell.execute_reply.started":"2024-11-21T18:32:56.358512Z","shell.execute_reply":"2024-11-21T18:32:58.204097Z"}},"outputs":[],"execution_count":28},{"cell_type":"markdown","source":"# Data Splitting","metadata":{}},{"cell_type":"code","source":"# Split the data into training and testing sets (80% training, 20% testing)\nX_train, X_test, y_train, y_test = train_test_split(X_balanced, y_balanced, test_size=0.2, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:32:58.206478Z","iopub.execute_input":"2024-11-21T18:32:58.206773Z","iopub.status.idle":"2024-11-21T18:33:03.090057Z","shell.execute_reply.started":"2024-11-21T18:32:58.206744Z","shell.execute_reply":"2024-11-21T18:33:03.089028Z"}},"outputs":[],"execution_count":29},{"cell_type":"code","source":"# Check the shape of each split\nprint(\"Training set (features):\", X_train.shape)\nprint(\"Training set (target):\", y_train.shape)\nprint(\"Test set (features):\", X_test.shape)\nprint(\"Test set (target):\", y_test.shape)\n\n# Confirm target distribution in training and test sets\nprint(\"Training set fraud cases:\", y_train.sum())\nprint(\"Test set fraud cases:\", y_test.sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:33:03.091308Z","iopub.execute_input":"2024-11-21T18:33:03.091615Z","iopub.status.idle":"2024-11-21T18:33:03.104815Z","shell.execute_reply.started":"2024-11-21T18:33:03.091584Z","shell.execute_reply":"2024-11-21T18:33:03.104012Z"}},"outputs":[{"name":"stdout","text":"Training set (features): (10167051, 20)\nTraining set (target): (10167051,)\nTest set (features): (2541763, 20)\nTest set (target): (2541763,)\nTraining set fraud cases: 5083481\nTest set fraud cases: 1270926\n","output_type":"stream"}],"execution_count":30},{"cell_type":"code","source":"# Check the distribution of the target (fraud vs. non-fraud)\nprint(\"Training set fraud distribution:\")\nprint(y_train.value_counts())\n\nprint(\"Test set fraud distribution:\")\nprint(y_test.value_counts())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:33:03.105921Z","iopub.execute_input":"2024-11-21T18:33:03.10622Z","iopub.status.idle":"2024-11-21T18:33:03.17503Z","shell.execute_reply.started":"2024-11-21T18:33:03.106193Z","shell.execute_reply":"2024-11-21T18:33:03.174228Z"}},"outputs":[{"name":"stdout","text":"Training set fraud distribution:\nisFraud\n0    5083570\n1    5083481\nName: count, dtype: int64\nTest set fraud distribution:\nisFraud\n1    1270926\n0    1270837\nName: count, dtype: int64\n","output_type":"stream"}],"execution_count":31},{"cell_type":"markdown","source":"# Choosing the models to be used","metadata":{}},{"cell_type":"markdown","source":"> **Random Forest:** A robust ensemble model that reduces overfitting and handles imbalanced data well. It also provides feature importance, aiding model interpretation.\n\n> **Gradient Boosting Machines (GBM):** Powerful models like XGBoost that combine weak models into strong ones, handling complex interactions and imbalances effectively.\n\n> **LightGBM:** A faster, memory-efficient implementation of gradient boosting, optimized for large datasets and capable of handling categorical features directly.\n\n> **Neural Networks:** Complex models that capture non-linear patterns, useful for large datasets and intricate relationships, though they require more data and computational resources.","metadata":{}},{"cell_type":"markdown","source":"# Model Training & Testing","metadata":{}},{"cell_type":"code","source":"# Combine X_train and y_train into a single DataFrame for sub-sampling\ntrain_data = pd.concat([X_train, y_train], axis=1)\ntest_data = pd.concat([X_test, y_test], axis=1)\n\n# Sub-sample 10% of the training data while maintaining class proportions\ntrain_sample = train_data.groupby('isFraud', group_keys=False).apply(\n    lambda x: x.sample(frac=0.1, random_state=42)\n)\n\n# Sub-sample 10% of the test data while maintaining class proportions\ntest_sample = test_data.groupby('isFraud', group_keys=False).apply(\n    lambda x: x.sample(frac=0.1, random_state=42)\n)\n\n# Split the sampled data back into features and target\nX_train_sample = train_sample.drop(columns='isFraud')\ny_train_sample = train_sample['isFraud']\n\nX_test_sample = test_sample.drop(columns='isFraud')\ny_test_sample = test_sample['isFraud']\n\n# Check new class distributions\nprint(\"Training sample fraud distribution:\")\nprint(y_train_sample.value_counts())\n\nprint(\"Testing sample fraud distribution:\")\nprint(y_test_sample.value_counts())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:33:03.175951Z","iopub.execute_input":"2024-11-21T18:33:03.176238Z","iopub.status.idle":"2024-11-21T18:33:06.992553Z","shell.execute_reply.started":"2024-11-21T18:33:03.176212Z","shell.execute_reply":"2024-11-21T18:33:06.991514Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_13/1772886421.py:6: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  train_sample = train_data.groupby('isFraud', group_keys=False).apply(\n","output_type":"stream"},{"name":"stdout","text":"Training sample fraud distribution:\nisFraud\n0    508357\n1    508348\nName: count, dtype: int64\nTesting sample fraud distribution:\nisFraud\n1    127093\n0    127084\nName: count, dtype: int64\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_13/1772886421.py:11: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  test_sample = test_data.groupby('isFraud', group_keys=False).apply(\n","output_type":"stream"}],"execution_count":32},{"cell_type":"markdown","source":"## Random Forest","metadata":{}},{"cell_type":"code","source":"# Import necessary libraries for model training and evaluation\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, accuracy_score, roc_auc_score, confusion_matrix","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:33:06.993682Z","iopub.execute_input":"2024-11-21T18:33:06.993957Z","iopub.status.idle":"2024-11-21T18:33:06.998104Z","shell.execute_reply.started":"2024-11-21T18:33:06.993929Z","shell.execute_reply":"2024-11-21T18:33:06.997187Z"}},"outputs":[],"execution_count":33},{"cell_type":"code","source":"# Initialize the Random Forest model\nrf = RandomForestClassifier(\n    n_estimators=100,   \n    max_depth=10,         \n    random_state=42,       \n    class_weight='balanced' \n)\n\n# Train the model using the training data\nprint(\"Training Random Forest on Training Set...\")\nrf.fit(X_train_sample, y_train_sample)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:33:06.999156Z","iopub.execute_input":"2024-11-21T18:33:06.999412Z","iopub.status.idle":"2024-11-21T18:36:19.256666Z","shell.execute_reply.started":"2024-11-21T18:33:06.999386Z","shell.execute_reply":"2024-11-21T18:36:19.255771Z"}},"outputs":[{"name":"stdout","text":"Training Random Forest on Training Set...\n","output_type":"stream"},{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"RandomForestClassifier(class_weight='balanced', max_depth=10, random_state=42)","text/html":"<style>#sk-container-id-1 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-1 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-1 pre {\n  padding: 0;\n}\n\n#sk-container-id-1 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-1 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-1 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-1 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-1 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-1 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-1 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-1 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-1 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-1 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n#sk-container-id-1 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-1 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-1 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-1 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-1 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-1 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-1 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(class_weight=&#x27;balanced&#x27;, max_depth=10, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;RandomForestClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(class_weight=&#x27;balanced&#x27;, max_depth=10, random_state=42)</pre></div> </div></div></div></div>"},"metadata":{}}],"execution_count":34},{"cell_type":"code","source":"# Make predictions on the sampled test set\ny_test_pred = rf.predict(X_test_sample)\ny_test_pred_proba = rf.predict_proba(X_test_sample)[:, 1]\n\n# Evaluate on the sampled test set\ntest_accuracy = accuracy_score(y_test_sample, y_test_pred)\ntest_roc_auc = roc_auc_score(y_test_sample, y_test_pred_proba)\n\n# Calculate F1-Score for the test set\ntest_f1_score = classification_report(y_test_sample, y_test_pred, output_dict=True)['accuracy']\n\n# Print results for the sampled test set\nprint(f\"Test Accuracy: {test_accuracy:.4f}\")\nprint(f\"Test ROC-AUC: {test_roc_auc:.4f}\")\nprint(f\"Test F1-Score: {test_f1_score:.4f}\")\n\n# Save the results\ntest_results = {\n    'Model': 'Random Forest',\n    'Test Accuracy': test_accuracy,\n    'Test ROC-AUC': test_roc_auc,\n    'Test F1-Score': test_f1_score\n}\n\n# Convert the results dictionary into a DataFrame\ntest_results_df = pd.DataFrame([test_results])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:36:19.257829Z","iopub.execute_input":"2024-11-21T18:36:19.258117Z","iopub.status.idle":"2024-11-21T18:36:21.562638Z","shell.execute_reply.started":"2024-11-21T18:36:19.258091Z","shell.execute_reply":"2024-11-21T18:36:21.561602Z"}},"outputs":[{"name":"stdout","text":"Test Accuracy: 0.9952\nTest ROC-AUC: 0.9999\nTest F1-Score: 0.9952\n","output_type":"stream"}],"execution_count":35},{"cell_type":"code","source":"print(\"\\nClassification Report:\")\nprint(classification_report(y_test_sample, y_test_pred))\n\nprint(\"\\nConfusion Matrix:\")\nprint(confusion_matrix(y_test_sample, y_test_pred))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:36:21.563946Z","iopub.execute_input":"2024-11-21T18:36:21.564261Z","iopub.status.idle":"2024-11-21T18:36:21.647873Z","shell.execute_reply.started":"2024-11-21T18:36:21.564232Z","shell.execute_reply":"2024-11-21T18:36:21.64679Z"}},"outputs":[{"name":"stdout","text":"\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       1.00      0.99      1.00    127084\n           1       0.99      1.00      1.00    127093\n\n    accuracy                           1.00    254177\n   macro avg       1.00      1.00      1.00    254177\nweighted avg       1.00      1.00      1.00    254177\n\n\nConfusion Matrix:\n[[126160    924]\n [   291 126802]]\n","output_type":"stream"}],"execution_count":36},{"cell_type":"markdown","source":"## XGBoost","metadata":{}},{"cell_type":"code","source":"# Import\nimport xgboost as xgb\nfrom sklearn.metrics import classification_report, accuracy_score, roc_auc_score, confusion_matrix","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:36:21.649104Z","iopub.execute_input":"2024-11-21T18:36:21.649411Z","iopub.status.idle":"2024-11-21T18:36:22.956376Z","shell.execute_reply.started":"2024-11-21T18:36:21.649379Z","shell.execute_reply":"2024-11-21T18:36:22.955205Z"}},"outputs":[],"execution_count":37},{"cell_type":"code","source":"# Initialize the XGBoost model\nxgb_model = xgb.XGBClassifier(\n    n_estimators=100,\n    max_depth=10,\n    random_state=42,  \n    scale_pos_weight=1,  \n    use_label_encoder=False, \n    eval_metric='logloss'  \n)\n\n# Train the model using the sampled training data\nprint(\"Training XGBoost on Training Set...\")\nxgb_model.fit(X_train_sample, y_train_sample)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:36:22.957727Z","iopub.execute_input":"2024-11-21T18:36:22.958057Z","iopub.status.idle":"2024-11-21T18:36:25.748856Z","shell.execute_reply.started":"2024-11-21T18:36:22.958005Z","shell.execute_reply":"2024-11-21T18:36:25.747593Z"}},"outputs":[{"name":"stdout","text":"Training XGBoost on Training Set...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/site-packages/xgboost/core.py:158: UserWarning: [18:36:23] WARNING: /workspace/src/learner.cc:740: \nParameters: { \"use_label_encoder\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n","output_type":"stream"},{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric='logloss',\n              feature_types=None, gamma=None, grow_policy=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_bin=None, max_cat_threshold=None,\n              max_cat_to_onehot=None, max_delta_step=None, max_depth=10,\n              max_leaves=None, min_child_weight=None, missing=nan,\n              monotone_constraints=None, multi_strategy=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=42, ...)","text/html":"<style>#sk-container-id-2 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-2 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-2 pre {\n  padding: 0;\n}\n\n#sk-container-id-2 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-2 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-2 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-2 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-2 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-2 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-2 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-2 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-2 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-2 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-2 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-2 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-2 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-2 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-2 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-2 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n#sk-container-id-2 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-2 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-2 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-2 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-2 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-2 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-2 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-2 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-2 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-2 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=&#x27;logloss&#x27;,\n              feature_types=None, gamma=None, grow_policy=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_bin=None, max_cat_threshold=None,\n              max_cat_to_onehot=None, max_delta_step=None, max_depth=10,\n              max_leaves=None, min_child_weight=None, missing=nan,\n              monotone_constraints=None, multi_strategy=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=42, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;XGBClassifier<span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=&#x27;logloss&#x27;,\n              feature_types=None, gamma=None, grow_policy=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_bin=None, max_cat_threshold=None,\n              max_cat_to_onehot=None, max_delta_step=None, max_depth=10,\n              max_leaves=None, min_child_weight=None, missing=nan,\n              monotone_constraints=None, multi_strategy=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=42, ...)</pre></div> </div></div></div></div>"},"metadata":{}}],"execution_count":38},{"cell_type":"code","source":"# Make predictions on the sampled test set\ny_test_pred_xgb = xgb_model.predict(X_test_sample)\ny_test_pred_proba_xgb = xgb_model.predict_proba(X_test_sample)[:, 1]  \n\n# Evaluate on the sampled test set\ntest_accuracy_xgb = accuracy_score(y_test_sample, y_test_pred_xgb)\ntest_roc_auc_xgb = roc_auc_score(y_test_sample, y_test_pred_proba_xgb)\n\n# Calculate F1-Score for the test set\ntest_f1_score_xgb = classification_report(y_test_sample, y_test_pred_xgb, output_dict=True)['accuracy']\n\n# Print results for the test set\nprint(f\"\\nXGBoost Test Accuracy: {test_accuracy_xgb:.4f}\")\nprint(f\"XGBoost Test ROC-AUC: {test_roc_auc_xgb:.4f}\")\nprint(f\"XGBoost Test F1-Score: {test_f1_score_xgb:.4f}\")\n\n# Save the results\ntest_results_xgb = {\n    'Model': 'XGBoost',\n    'Test Accuracy': test_accuracy_xgb,\n    'Test ROC-AUC': test_roc_auc_xgb,\n    'Test F1-Score': test_f1_score_xgb\n}\n\n# Convert the results dictionary into a DataFrame\ntest_results_xgb_df = pd.DataFrame([test_results_xgb])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:36:25.750625Z","iopub.execute_input":"2024-11-21T18:36:25.751853Z","iopub.status.idle":"2024-11-21T18:36:25.94546Z","shell.execute_reply.started":"2024-11-21T18:36:25.751803Z","shell.execute_reply":"2024-11-21T18:36:25.944503Z"}},"outputs":[{"name":"stdout","text":"\nXGBoost Test Accuracy: 0.9993\nXGBoost Test ROC-AUC: 1.0000\nXGBoost Test F1-Score: 0.9993\n","output_type":"stream"}],"execution_count":39},{"cell_type":"code","source":"print(\"\\nXGBoost Classification Report:\")\nprint(classification_report(y_test_sample, y_test_pred_xgb))\n\nprint(\"\\nXGBoost Confusion Matrix:\")\nprint(confusion_matrix(y_test_sample, y_test_pred_xgb))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:36:25.94673Z","iopub.execute_input":"2024-11-21T18:36:25.947085Z","iopub.status.idle":"2024-11-21T18:36:26.032869Z","shell.execute_reply.started":"2024-11-21T18:36:25.94703Z","shell.execute_reply":"2024-11-21T18:36:26.031999Z"}},"outputs":[{"name":"stdout","text":"\nXGBoost Classification Report:\n              precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00    127084\n           1       1.00      1.00      1.00    127093\n\n    accuracy                           1.00    254177\n   macro avg       1.00      1.00      1.00    254177\nweighted avg       1.00      1.00      1.00    254177\n\n\nXGBoost Confusion Matrix:\n[[126928    156]\n [    10 127083]]\n","output_type":"stream"}],"execution_count":40},{"cell_type":"markdown","source":"## LightGBM","metadata":{}},{"cell_type":"code","source":"# Import\nimport lightgbm as lgb\nfrom sklearn.metrics import classification_report, accuracy_score, roc_auc_score, confusion_matrix","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:36:26.037879Z","iopub.execute_input":"2024-11-21T18:36:26.038216Z","iopub.status.idle":"2024-11-21T18:36:26.190589Z","shell.execute_reply.started":"2024-11-21T18:36:26.038188Z","shell.execute_reply":"2024-11-21T18:36:26.189517Z"}},"outputs":[],"execution_count":41},{"cell_type":"code","source":"# Initialize the LightGBM model\nlgbm_model = lgb.LGBMClassifier(\n    n_estimators=100,   \n    max_depth=10,       \n    class_weight='balanced', \n    random_state=42    \n)\n\n# Train the model using the sampled training data\nprint(\"Training LightGBM on Training Set...\")\nlgbm_model.fit(X_train_sample, y_train_sample)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:36:26.191877Z","iopub.execute_input":"2024-11-21T18:36:26.192228Z","iopub.status.idle":"2024-11-21T18:36:27.914514Z","shell.execute_reply.started":"2024-11-21T18:36:26.192195Z","shell.execute_reply":"2024-11-21T18:36:27.913378Z"}},"outputs":[{"name":"stdout","text":"Training LightGBM on Training Set...\n[LightGBM] [Info] Number of positive: 508348, number of negative: 508357\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.021813 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 3195\n[LightGBM] [Info] Number of data points in the train set: 1016705, number of used features: 19\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=-0.000000\n[LightGBM] [Info] Start training from score -0.000000\n","output_type":"stream"},{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"LGBMClassifier(class_weight='balanced', max_depth=10, random_state=42)","text/html":"<style>#sk-container-id-3 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-3 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-3 pre {\n  padding: 0;\n}\n\n#sk-container-id-3 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-3 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-3 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-3 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-3 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-3 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-3 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-3 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-3 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-3 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-3 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-3 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-3 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-3 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-3 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-3 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n#sk-container-id-3 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-3 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-3 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-3 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-3 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-3 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-3 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-3 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-3 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-3 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LGBMClassifier(class_weight=&#x27;balanced&#x27;, max_depth=10, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;LGBMClassifier<span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LGBMClassifier(class_weight=&#x27;balanced&#x27;, max_depth=10, random_state=42)</pre></div> </div></div></div></div>"},"metadata":{}}],"execution_count":42},{"cell_type":"code","source":"# Make predictions on the sampled test set\ny_test_pred_lgbm = lgbm_model.predict(X_test_sample)\ny_test_pred_proba_lgbm = lgbm_model.predict_proba(X_test_sample)[:, 1]\n\n# Evaluate on the sampled test set\ntest_accuracy_lgbm = accuracy_score(y_test_sample, y_test_pred_lgbm)\ntest_roc_auc_lgbm = roc_auc_score(y_test_sample, y_test_pred_proba_lgbm)\n\n# Calculate F1-Score for the test set\ntest_f1_score_lgbm = classification_report(y_test_sample, y_test_pred_lgbm, output_dict=True)['accuracy']\n\n# Print results for the test set\nprint(f\"\\nLightGBM Test Accuracy: {test_accuracy_lgbm:.4f}\")\nprint(f\"LightGBM Test ROC-AUC: {test_roc_auc_lgbm:.4f}\")\nprint(f\"LightGBM Test F1-Score: {test_f1_score_lgbm:.4f}\")\n\n# Save the results\ntest_results_lgbm = {\n    'Model': 'LightGBM',\n    'Test Accuracy': test_accuracy_lgbm,\n    'Test ROC-AUC': test_roc_auc_lgbm,\n    'Test F1-Score': test_f1_score_lgbm\n}\n\n# Convert the results dictionary into a DataFrame (optional)\ntest_results_lgbm_df = pd.DataFrame([test_results_lgbm])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:36:27.915832Z","iopub.execute_input":"2024-11-21T18:36:27.916189Z","iopub.status.idle":"2024-11-21T18:36:28.228892Z","shell.execute_reply.started":"2024-11-21T18:36:27.916156Z","shell.execute_reply":"2024-11-21T18:36:28.227955Z"}},"outputs":[{"name":"stdout","text":"\nLightGBM Test Accuracy: 0.9984\nLightGBM Test ROC-AUC: 1.0000\nLightGBM Test F1-Score: 0.9984\n","output_type":"stream"}],"execution_count":43},{"cell_type":"code","source":"print(\"\\nLightGBM Classification Report:\")\nprint(classification_report(y_test_sample, y_test_pred_lgbm))\n\nprint(\"\\nLightGBM Confusion Matrix:\")\nprint(confusion_matrix(y_test_sample, y_test_pred_lgbm))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:36:28.23039Z","iopub.execute_input":"2024-11-21T18:36:28.230746Z","iopub.status.idle":"2024-11-21T18:36:28.315845Z","shell.execute_reply.started":"2024-11-21T18:36:28.230713Z","shell.execute_reply":"2024-11-21T18:36:28.315023Z"}},"outputs":[{"name":"stdout","text":"\nLightGBM Classification Report:\n              precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00    127084\n           1       1.00      1.00      1.00    127093\n\n    accuracy                           1.00    254177\n   macro avg       1.00      1.00      1.00    254177\nweighted avg       1.00      1.00      1.00    254177\n\n\nLightGBM Confusion Matrix:\n[[126718    366]\n [    41 127052]]\n","output_type":"stream"}],"execution_count":44},{"cell_type":"markdown","source":"## MLP","metadata":{}},{"cell_type":"code","source":"# Import \nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.metrics import classification_report, accuracy_score, roc_auc_score, confusion_matrix","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:36:28.316975Z","iopub.execute_input":"2024-11-21T18:36:28.317326Z","iopub.status.idle":"2024-11-21T18:36:28.328823Z","shell.execute_reply.started":"2024-11-21T18:36:28.317299Z","shell.execute_reply":"2024-11-21T18:36:28.328023Z"}},"outputs":[],"execution_count":45},{"cell_type":"code","source":"# Initialize the MLP model\nmlp_model = MLPClassifier(\n    hidden_layer_sizes=(50,),     \n    max_iter=50,              \n    random_state=42,               \n    solver='adam',          \n    learning_rate='adaptive'  \n)\n\n# Train the model using the sampled training data \nprint(\"Training MLP on Training Set...\")\nmlp_model.fit(X_train_sample, y_train_sample)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:36:28.329975Z","iopub.execute_input":"2024-11-21T18:36:28.330318Z","iopub.status.idle":"2024-11-21T18:46:50.506319Z","shell.execute_reply.started":"2024-11-21T18:36:28.330288Z","shell.execute_reply":"2024-11-21T18:46:50.504466Z"}},"outputs":[{"name":"stdout","text":"Training MLP on Training Set...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py:690: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (50) reached and the optimization hasn't converged yet.\n  warnings.warn(\n","output_type":"stream"},{"execution_count":46,"output_type":"execute_result","data":{"text/plain":"MLPClassifier(hidden_layer_sizes=(50,), learning_rate='adaptive', max_iter=50,\n              random_state=42)","text/html":"<style>#sk-container-id-4 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-4 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-4 pre {\n  padding: 0;\n}\n\n#sk-container-id-4 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-4 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-4 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-4 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-4 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-4 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-4 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-4 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-4 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-4 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-4 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-4 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-4 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-4 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-4 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-4 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-4 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-4 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-4 div.sk-label label.sk-toggleable__label,\n#sk-container-id-4 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-4 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-4 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-4 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-4 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-4 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-4 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-4 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-4 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-4 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-4 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>MLPClassifier(hidden_layer_sizes=(50,), learning_rate=&#x27;adaptive&#x27;, max_iter=50,\n              random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;MLPClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.neural_network.MLPClassifier.html\">?<span>Documentation for MLPClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>MLPClassifier(hidden_layer_sizes=(50,), learning_rate=&#x27;adaptive&#x27;, max_iter=50,\n              random_state=42)</pre></div> </div></div></div></div>"},"metadata":{}}],"execution_count":46},{"cell_type":"code","source":"# Make predictions on the sampled test set\ny_test_pred_mlp = mlp_model.predict(X_test_sample)\ny_test_pred_proba_mlp = mlp_model.predict_proba(X_test_sample)[:, 1]  \n\n# Evaluate on the sampled test set\ntest_accuracy_mlp = accuracy_score(y_test_sample, y_test_pred_mlp)\ntest_roc_auc_mlp = roc_auc_score(y_test_sample, y_test_pred_proba_mlp)\n\n# Calculate F1-Score for the test set\ntest_f1_score_mlp = classification_report(y_test_sample, y_test_pred_mlp, output_dict=True)['accuracy']\n\n# Print results for the test set\nprint(f\"\\nMLP Test Accuracy: {test_accuracy_mlp:.4f}\")\nprint(f\"MLP Test ROC-AUC: {test_roc_auc_mlp:.4f}\")\nprint(f\"MLP Test F1-Score: {test_f1_score_mlp:.4f}\")\n\n# Save the results\ntest_results_mlp = {\n    'Model': 'MLP',\n    'Test Accuracy': test_accuracy_mlp,\n    'Test ROC-AUC': test_roc_auc_mlp,\n    'Test F1-Score': test_f1_score_mlp\n}\n\n# Convert the results dictionary into a DataFrame\ntest_results_mlp_df = pd.DataFrame([test_results_mlp])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:46:50.508856Z","iopub.execute_input":"2024-11-21T18:46:50.509886Z","iopub.status.idle":"2024-11-21T18:46:51.037459Z","shell.execute_reply.started":"2024-11-21T18:46:50.509808Z","shell.execute_reply":"2024-11-21T18:46:51.036705Z"}},"outputs":[{"name":"stdout","text":"\nMLP Test Accuracy: 0.8230\nMLP Test ROC-AUC: 0.8383\nMLP Test F1-Score: 0.8230\n","output_type":"stream"}],"execution_count":47},{"cell_type":"code","source":"print(\"\\nMLP Classification Report:\")\nprint(classification_report(y_test_sample, y_test_pred_mlp))\n\nprint(\"\\nMLP Confusion Matrix:\")\nprint(confusion_matrix(y_test_sample, y_test_pred_mlp))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:46:51.038456Z","iopub.execute_input":"2024-11-21T18:46:51.038744Z","iopub.status.idle":"2024-11-21T18:46:51.134377Z","shell.execute_reply.started":"2024-11-21T18:46:51.038714Z","shell.execute_reply":"2024-11-21T18:46:51.133534Z"}},"outputs":[{"name":"stdout","text":"\nMLP Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.98      0.66      0.79    127084\n           1       0.74      0.99      0.85    127093\n\n    accuracy                           0.82    254177\n   macro avg       0.86      0.82      0.82    254177\nweighted avg       0.86      0.82      0.82    254177\n\n\nMLP Confusion Matrix:\n[[ 83866  43218]\n [  1784 125309]]\n","output_type":"stream"}],"execution_count":48},{"cell_type":"markdown","source":"# Model Evaluation - Summary","metadata":{}},{"cell_type":"code","source":"# Combine all the model result DataFrames into one\nresults_df_combined = pd.concat([\n    test_results_df,\n    test_results_xgb_df,\n    test_results_lgbm_df,\n    test_results_mlp_df\n], ignore_index=True)\n\n# Sort the combined DataFrame by Test Accuracy\nresults_df_sorted = results_df_combined.sort_values(by='Test Accuracy', ascending=False)\n\n# Show the sorted DataFrame\nprint(\"Model performance comparison:\")\nprint(results_df_sorted)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:48:09.305417Z","iopub.execute_input":"2024-11-21T18:48:09.306375Z","iopub.status.idle":"2024-11-21T18:48:09.314196Z","shell.execute_reply.started":"2024-11-21T18:48:09.306337Z","shell.execute_reply":"2024-11-21T18:48:09.313488Z"}},"outputs":[{"name":"stdout","text":"Model performance comparison:\n           Model  Test Accuracy  Test ROC-AUC  Test F1-Score\n1        XGBoost           1.00          1.00           1.00\n2       LightGBM           1.00          1.00           1.00\n0  Random Forest           1.00          1.00           1.00\n3            MLP           0.82          0.84           0.82\n","output_type":"stream"}],"execution_count":50},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}