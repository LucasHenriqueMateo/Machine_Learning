{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9422467,"sourceType":"datasetVersion","datasetId":5723226}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Business Case:\n\n> **Um dos grandes desafios para Gerentes é contratar e manter top talents**\n\n# Keypoints:\n\n1. A contratação e retenção de funcionários são processos complexos que demandam investimento de recursos, tempo e competências.\n\n2. Empresários de pequenas empresas dedicam 40% de seu tempo a atividades que não geram lucro direto, como a busca e contratação de novos colaboradores.\n\n3. Empresas investem entre 15% e 20% do salário de um funcionário para trazer um novo candidato.\n\n4. Contratar um novo empregado custa em média $ 7645 (Grandes Empresas).\n\n5. Em média, são necessários 52 dias para preencher a posição.\n","metadata":{}},{"cell_type":"code","source":"import os\nimport zipfile\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:52:50.224346Z","iopub.execute_input":"2024-09-18T16:52:50.224770Z","iopub.status.idle":"2024-09-18T16:52:52.621079Z","shell.execute_reply.started":"2024-09-18T16:52:50.224727Z","shell.execute_reply":"2024-09-18T16:52:52.619897Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Baixar o conjunto de dados do Kaggle\n!kaggle datasets download -d swatitale/hranalytics","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-18T16:52:52.622845Z","iopub.execute_input":"2024-09-18T16:52:52.623329Z","iopub.status.idle":"2024-09-18T16:52:55.427562Z","shell.execute_reply.started":"2024-09-18T16:52:52.623291Z","shell.execute_reply":"2024-09-18T16:52:55.426047Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Listar arquivos no diretório atual para verificar se o CSV está lá\nos.listdir('/kaggle/working')","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:52:55.429438Z","iopub.execute_input":"2024-09-18T16:52:55.429837Z","iopub.status.idle":"2024-09-18T16:52:55.441924Z","shell.execute_reply.started":"2024-09-18T16:52:55.429793Z","shell.execute_reply":"2024-09-18T16:52:55.440362Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Definir o caminho do arquivo zip\nzip_path = '/kaggle/working/hranalytics.zip'\n\n# Definir o diretório onde o conteúdo será extraído\nextract_path = '/kaggle/working/'\n\n# Descompactar o arquivo zip\nwith zipfile.ZipFile(zip_path, 'r') as zip_ref:\n    zip_ref.extractall(extract_path)","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:52:55.446877Z","iopub.execute_input":"2024-09-18T16:52:55.447291Z","iopub.status.idle":"2024-09-18T16:52:55.464349Z","shell.execute_reply.started":"2024-09-18T16:52:55.447242Z","shell.execute_reply":"2024-09-18T16:52:55.463080Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Verificar os arquivos extraídos\nextracted_files = os.listdir(extract_path)\nprint(\"Arquivos extraídos:\", extracted_files)","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:52:55.466374Z","iopub.execute_input":"2024-09-18T16:52:55.466841Z","iopub.status.idle":"2024-09-18T16:52:55.476110Z","shell.execute_reply.started":"2024-09-18T16:52:55.466782Z","shell.execute_reply":"2024-09-18T16:52:55.474543Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Definir o caminho do arquivo CSV\ncsv_file_path = '/kaggle/working/WA_Fn-UseC_-HR-Employee-Attrition.csv'\n\n# Carregar o dataset\ndf = pd.read_csv(csv_file_path)\n\n# Verificar as primeiras linhas do dataset\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:52:55.478424Z","iopub.execute_input":"2024-09-18T16:52:55.478890Z","iopub.status.idle":"2024-09-18T16:52:55.541028Z","shell.execute_reply.started":"2024-09-18T16:52:55.478838Z","shell.execute_reply":"2024-09-18T16:52:55.539885Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Verificando features\ndf.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:52:55.542804Z","iopub.execute_input":"2024-09-18T16:52:55.543234Z","iopub.status.idle":"2024-09-18T16:52:55.568683Z","shell.execute_reply.started":"2024-09-18T16:52:55.543194Z","shell.execute_reply":"2024-09-18T16:52:55.567372Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Estatísticas\ndf.describe()","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:52:55.570144Z","iopub.execute_input":"2024-09-18T16:52:55.570552Z","iopub.status.idle":"2024-09-18T16:52:55.650886Z","shell.execute_reply.started":"2024-09-18T16:52:55.570513Z","shell.execute_reply":"2024-09-18T16:52:55.649568Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Data Analysis","metadata":{}},{"cell_type":"code","source":"#Transformação de colunas categóricas\ndf['Attrition'] = df['Attrition'].apply(lambda x: 1 if x == 'Yes' else 0)\ndf['Over18'] = df['Over18'].apply(lambda x: 1 if x == 'Y' else 0)\ndf['OverTime'] = df['OverTime'].apply(lambda x: 1 if x == 'Yes' else 0)","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:52:55.652540Z","iopub.execute_input":"2024-09-18T16:52:55.652998Z","iopub.status.idle":"2024-09-18T16:52:55.664326Z","shell.execute_reply.started":"2024-09-18T16:52:55.652946Z","shell.execute_reply":"2024-09-18T16:52:55.662907Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Heatmap de dados nulos\nplt.imshow(df.isnull(), cmap='coolwarm', aspect='auto'); plt.colorbar(label='Nulos'); plt.title('Mapa de Valores Nulos'); plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:52:55.670134Z","iopub.execute_input":"2024-09-18T16:52:55.670606Z","iopub.status.idle":"2024-09-18T16:52:56.149288Z","shell.execute_reply.started":"2024-09-18T16:52:55.670542Z","shell.execute_reply":"2024-09-18T16:52:56.148113Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Plotando o histograma para ver a distribuição de cada atributo\ndf.hist(bins=30, figsize=(12, 10), color='steelblue', edgecolor='black'); plt.tight_layout(); plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:52:56.151080Z","iopub.execute_input":"2024-09-18T16:52:56.151656Z","iopub.status.idle":"2024-09-18T16:53:02.233488Z","shell.execute_reply.started":"2024-09-18T16:52:56.151607Z","shell.execute_reply":"2024-09-18T16:53:02.232206Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Deletando colunas desnecessárias (atributos com valores únicos)\ndf.drop(['StandardHours','EmployeeNumber','Over18','EmployeeCount'], axis = 1, inplace = True)","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:53:02.234970Z","iopub.execute_input":"2024-09-18T16:53:02.235371Z","iopub.status.idle":"2024-09-18T16:53:02.243948Z","shell.execute_reply.started":"2024-09-18T16:53:02.235335Z","shell.execute_reply":"2024-09-18T16:53:02.242688Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Separando dataframes de funcionários que saíram e ficaram na empresa para analisar\nSim_saiu_df = df[df['Attrition'] == 1]\nNao_saiu_df = df[df['Attrition'] == 0]","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:53:02.245472Z","iopub.execute_input":"2024-09-18T16:53:02.245883Z","iopub.status.idle":"2024-09-18T16:53:02.275462Z","shell.execute_reply.started":"2024-09-18T16:53:02.245837Z","shell.execute_reply":"2024-09-18T16:53:02.274338Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Conferindo a porcentagem de funcionários que saíram da empresa\nimport matplotlib.pyplot as plt\n\n# Dados\nlabels = ['Saíram', 'Não saíram']\nvalues = [len(Sim_saiu_df), len(df) - len(Sim_saiu_df)]\n\n# Criar gráfico de barras\nplt.bar(labels, values, color=['red', 'green'])\nplt.ylabel('Número de Funcionários')\nplt.title('Distribuição de Funcionários')\n\n# Adicionar rótulos dentro das barras, centralizados\nfor i, value in enumerate(values):\n    plt.text(i, value / 2, f'{value}\\n({100 * value / len(df):.1f}%)', \n             ha='center', va='center', color='white')\n\nplt.show()\n\n#**Nota-se que este dataset está desbalanceado!","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:53:02.277242Z","iopub.execute_input":"2024-09-18T16:53:02.278281Z","iopub.status.idle":"2024-09-18T16:53:02.513194Z","shell.execute_reply.started":"2024-09-18T16:53:02.278222Z","shell.execute_reply":"2024-09-18T16:53:02.511814Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"Sim_saiu_df.describre()\nNao_saiu_df.describre()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Utilizando como referência as medidas de média e desvio padrão, podemos notar que:\n\n> 'Idade': Idade média dos trabalhadores que ficaram é superior à dos que saíram\n\n> 'DailyRate': A taxa dos empregados que ficaram é mais elevada\n\n> 'DistanceFromHome': Os empregados que ficaram vivem mais perto de casa \n\n> 'EnvironmentSatisfaction' & 'JobSatisfaction': Os empregados que ficaram estão geralmente mais satisfeitos com os seus empregos\n\n> 'StockOptionLevel': Os empregados que ficaram tendem a ter um nível de opção de compra de acções mais elevado\n","metadata":{}},{"cell_type":"code","source":"# Calcular correlações\ncorrelations = df.corr(numeric_only = True)","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:53:02.514761Z","iopub.execute_input":"2024-09-18T16:53:02.515197Z","iopub.status.idle":"2024-09-18T16:53:02.526245Z","shell.execute_reply.started":"2024-09-18T16:53:02.515150Z","shell.execute_reply":"2024-09-18T16:53:02.525044Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Criar o mapa de calor\nplt.figure(figsize=(12, 10))\nsns.heatmap(correlations, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)\nplt.title('Mapa de Correlações')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:53:02.528017Z","iopub.execute_input":"2024-09-18T16:53:02.528536Z","iopub.status.idle":"2024-09-18T16:53:04.412917Z","shell.execute_reply.started":"2024-09-18T16:53:02.528447Z","shell.execute_reply":"2024-09-18T16:53:04.411778Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Obter as correlações absolutas (ignorando a diagonal)\ncorrelation_matrix = correlations.abs()\n\n# Definir a diagonal (correlação de uma variável consigo mesma) como 0\nnp.fill_diagonal(correlation_matrix.values, 0)\n\n# Encontrar as top 5 correlações mais altas, removendo duplicatas\ntop_5_correlations = (\n    correlation_matrix.where(np.triu(np.ones(correlation_matrix.shape), k=1).astype(bool))\n    .stack()\n    .sort_values(ascending=False)\n    .head(5)\n)\n\n# Exibir as top 5 correlações\nprint(\"Top 5 variáveis mais correlacionadas (sem duplicatas):\")\nprint(top_5_correlations)","metadata":{"execution":{"iopub.status.busy":"2024-09-18T17:09:44.356987Z","iopub.execute_input":"2024-09-18T17:09:44.357435Z","iopub.status.idle":"2024-09-18T17:09:44.369672Z","shell.execute_reply.started":"2024-09-18T17:09:44.357393Z","shell.execute_reply":"2024-09-18T17:09:44.368519Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(18, 8))\nsns.countplot(x='Age', hue='Attrition', data=df, palette='viridis')\n\nplt.title('Correlação de Idade por Output')\nplt.xlabel('Idade')\nplt.ylabel('Número de Funcionários')\nplt.xticks(rotation=0)  # Rótulos do eixo x horizontais\n\nhandles, labels = plt.gca().get_legend_handles_labels()\nplt.legend(handles, ['Não saiu', 'Saiu'], title='Attrition')\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:53:04.414491Z","iopub.execute_input":"2024-09-18T16:53:04.414910Z","iopub.status.idle":"2024-09-18T16:53:05.166707Z","shell.execute_reply.started":"2024-09-18T16:53:04.414866Z","shell.execute_reply":"2024-09-18T16:53:05.165570Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Nota-se que pessoais mais velhas tendem a não sair da empresa, para este dataset, enquanto a maior tendência encontra-se em 26-31 anos(26, 28, 29 e 31).","metadata":{}},{"cell_type":"code","source":"#Observando tendências interessantes\n# Criar uma figura com subplots\nplt.figure(figsize=[18, 12])\n\n# Subplot 1: Distribuição de JobRole\nplt.subplot(2, 2, 1)\nsns.countplot(x='JobRole', hue='Attrition', data=df, palette='viridis')\nplt.title('Distribuição de Funções por Attrition')\nplt.xlabel('Função')\nplt.ylabel('Número de Funcionários')\nplt.xticks(rotation=45, ha='right')\n\n# Subplot 2: Distribuição de MaritalStatus\nplt.subplot(2, 2, 2)\nsns.countplot(x='MaritalStatus', hue='Attrition', data=df, palette='viridis')\nplt.title('Distribuição de Status de Casamento por Attrition')\nplt.xlabel('Status de Casamento')\nplt.ylabel('Número de Funcionários')\n\n# Subplot 3: Distribuição de JobInvolvement\nplt.subplot(2, 2, 3)\nsns.countplot(x='JobInvolvement', hue='Attrition', data=df, palette='viridis')\nplt.title('Distribuição de Envolvimento no Trabalho por Attrition')\nplt.xlabel('Envolvimento no Trabalho')\nplt.ylabel('Número de Funcionários')\n\n# Subplot 4: Distribuição de JobLevel\nplt.subplot(2, 2, 4)\nsns.countplot(x='JobLevel', hue='Attrition', data=df, palette='viridis')\nplt.title('Distribuição de Nível de Trabalho por Attrition')\nplt.xlabel('Nível de Trabalho')\nplt.ylabel('Número de Funcionários')\n\n# Ajustar layout\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:53:05.168319Z","iopub.execute_input":"2024-09-18T16:53:05.168714Z","iopub.status.idle":"2024-09-18T16:53:06.634203Z","shell.execute_reply.started":"2024-09-18T16:53:05.168675Z","shell.execute_reply":"2024-09-18T16:53:06.632991Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\n\nwarnings.filterwarnings(\"ignore\", category=FutureWarning, module='seaborn')\n\nplt.figure(figsize=(18, 12))\n\n# Gráfico para 'DistanceFromHome'\nplt.subplot(3, 1, 1)\nsns.kdeplot(Sim_saiu_df['DistanceFromHome'], label='Funcionários que saíram', fill=True, color='red', alpha=0.5)\nsns.kdeplot(Nao_saiu_df['DistanceFromHome'], label='Funcionários que ficaram', fill=True, color='blue', alpha=0.5)\nplt.xlabel('Distância de Casa')\nplt.title('Distribuição da Distância de Casa por Status de Emprego')\nplt.legend(title='Status de Emprego')\n\n# Gráfico para 'YearsWithCurrentManager'\nplt.subplot(3, 1, 2)\nsns.kdeplot(Sim_saiu_df['YearsWithCurrManager'], label='Funcionários que saíram', fill=True, color='red', alpha=0.5)\nsns.kdeplot(Nao_saiu_df['YearsWithCurrManager'], label='Funcionários que ficaram', fill=True, color='blue', alpha=0.5)\nplt.xlabel('Anos com o Gerente Atual')\nplt.title('Distribuição dos Anos com o Gerente Atual por Status de Emprego')\nplt.legend(title='Status de Emprego')\n\n# Gráfico para 'TotalWorkingYears'\nplt.subplot(3, 1, 3)\nsns.kdeplot(Sim_saiu_df['TotalWorkingYears'], label='Funcionários que saíram', fill=True, color='red', alpha=0.5)\nsns.kdeplot(Nao_saiu_df['TotalWorkingYears'], label='Funcionários que ficaram', fill=True, color='blue', alpha=0.5)\nplt.xlabel('Total de Anos de Trabalho')\nplt.title('Distribuição do Total de Anos de Trabalho por Status de Emprego')\nplt.legend(title='Status de Emprego')\n\nplt.tight_layout()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:53:06.635760Z","iopub.execute_input":"2024-09-18T16:53:06.636213Z","iopub.status.idle":"2024-09-18T16:53:07.900718Z","shell.execute_reply.started":"2024-09-18T16:53:06.636162Z","shell.execute_reply":"2024-09-18T16:53:07.899454Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(15, 10))\nsns.boxplot(x='MonthlyIncome', y='Gender', data=df)\nplt.title('Distribuição da Renda Mensal por Gênero')\nplt.xlabel('Renda Mensal')\nplt.ylabel('Gênero')\nplt.show()\n\nplt.figure(figsize=(15, 10))\nsns.stripplot(x='MonthlyIncome', y='JobRole', data=df, jitter=True, palette='viridis')\nplt.title('Distribuição da Renda Mensal por Função de Trabalho')\nplt.xlabel('Renda Mensal')\nplt.ylabel('Função de Trabalho')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:53:07.902063Z","iopub.execute_input":"2024-09-18T16:53:07.902445Z","iopub.status.idle":"2024-09-18T16:53:08.637811Z","shell.execute_reply.started":"2024-09-18T16:53:07.902405Z","shell.execute_reply":"2024-09-18T16:53:08.636563Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Divisão entre treinamento e teste + limpeza dos dados","metadata":{}},{"cell_type":"code","source":"# Visualizar as primeiras linhas do dataset\ndf.head(3)","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:53:08.639373Z","iopub.execute_input":"2024-09-18T16:53:08.639758Z","iopub.status.idle":"2024-09-18T16:53:08.661058Z","shell.execute_reply.started":"2024-09-18T16:53:08.639710Z","shell.execute_reply":"2024-09-18T16:53:08.659812Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Separar as variáveis categóricas\ncategorical_features = df[['BusinessTravel', 'Department', 'EducationField', 'Gender', 'JobRole', 'MaritalStatus']]\n\n# Codificar variáveis categóricas usando OneHotEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nencoder = OneHotEncoder(sparse_output=False)  # sparse_output=False retorna um array denso\nencoded_categorical = encoder.fit_transform(categorical_features)\n\n# Converter o array codificado para DataFrame e visualizar\nencoded_categorical_df = pd.DataFrame(encoded_categorical, columns=encoder.get_feature_names_out())\nencoded_categorical_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:53:08.662824Z","iopub.execute_input":"2024-09-18T16:53:08.663823Z","iopub.status.idle":"2024-09-18T16:53:08.803559Z","shell.execute_reply.started":"2024-09-18T16:53:08.663770Z","shell.execute_reply":"2024-09-18T16:53:08.802257Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Separar as variáveis numéricas\nnumerical_features = df[['Age', 'DailyRate', 'DistanceFromHome', 'Education', 'EnvironmentSatisfaction', 'HourlyRate', \n                         'JobInvolvement', 'JobLevel', 'JobSatisfaction', 'MonthlyIncome', 'MonthlyRate', \n                         'NumCompaniesWorked', 'OverTime', 'PercentSalaryHike', 'PerformanceRating', \n                         'RelationshipSatisfaction', 'StockOptionLevel', 'TotalWorkingYears', \n                         'TrainingTimesLastYear', 'WorkLifeBalance', 'YearsAtCompany', 'YearsInCurrentRole', \n                         'YearsSinceLastPromotion', 'YearsWithCurrManager']]\n\n# Concatenar variáveis categóricas e numéricas\nall_features = pd.concat([encoded_categorical_df, numerical_features.reset_index(drop=True)], axis=1)\n\n# Normalizar as variáveis\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX_normalized = scaler.fit_transform(all_features)\n\n# Separar a variável alvo\ny = df['Attrition']","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:53:08.805541Z","iopub.execute_input":"2024-09-18T16:53:08.805911Z","iopub.status.idle":"2024-09-18T16:53:08.822429Z","shell.execute_reply.started":"2024-09-18T16:53:08.805874Z","shell.execute_reply":"2024-09-18T16:53:08.821048Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Verificação\nX_normalized_df = pd.DataFrame(X_normalized)","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:53:08.824188Z","iopub.execute_input":"2024-09-18T16:53:08.824627Z","iopub.status.idle":"2024-09-18T16:53:08.835182Z","shell.execute_reply.started":"2024-09-18T16:53:08.824587Z","shell.execute_reply":"2024-09-18T16:53:08.833611Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_normalized_df","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:53:08.836782Z","iopub.execute_input":"2024-09-18T16:53:08.837164Z","iopub.status.idle":"2024-09-18T16:53:08.885209Z","shell.execute_reply.started":"2024-09-18T16:53:08.837127Z","shell.execute_reply":"2024-09-18T16:53:08.883775Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:53:08.886471Z","iopub.execute_input":"2024-09-18T16:53:08.886800Z","iopub.status.idle":"2024-09-18T16:53:08.896773Z","shell.execute_reply.started":"2024-09-18T16:53:08.886767Z","shell.execute_reply":"2024-09-18T16:53:08.895393Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Treinamento - Regressão Logística","metadata":{}},{"cell_type":"code","source":"# Separar os dados em conjuntos de treino e teste\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_normalized_df, y, test_size=0.25, random_state=42)\n\n# Verificar as formas dos conjuntos de treino e teste\nprint(f\"Forma do conjunto de treino: {X_train.shape}\")\nprint(f\"Forma do conjunto de teste: {X_test.shape}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:53:08.898192Z","iopub.execute_input":"2024-09-18T16:53:08.898577Z","iopub.status.idle":"2024-09-18T16:53:09.061393Z","shell.execute_reply.started":"2024-09-18T16:53:08.898530Z","shell.execute_reply":"2024-09-18T16:53:09.060349Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Treinar o modelo de Regressão Logística\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n\nmodel = LogisticRegression(max_iter=1000)  # Aumentar o número de iterações para garantir a convergência\nmodel.fit(X_train, y_train)\n\n# Fazer previsões\ny_pred = model.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:53:09.066347Z","iopub.execute_input":"2024-09-18T16:53:09.066748Z","iopub.status.idle":"2024-09-18T16:53:09.228631Z","shell.execute_reply.started":"2024-09-18T16:53:09.066711Z","shell.execute_reply":"2024-09-18T16:53:09.227390Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Calcular e exibir a acurácia\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Acurácia do modelo: {accuracy * 100:.2f}%\")\n\n# Performance do conjunto de teste\ncm = confusion_matrix(y_test, y_pred)\nplt.figure(figsize=(8, 6))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False, \n            xticklabels=['Não Saiu', 'Saiu'], yticklabels=['Não Saiu', 'Saiu'])\nplt.xlabel('Predição')\nplt.ylabel('Real')\nplt.title('Matriz de Confusão')\nplt.show()\n\n# Relatório de classificação\nprint(\"Relatório de Classificação:\")\nprint(classification_report(y_test, y_pred))","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:53:09.230169Z","iopub.execute_input":"2024-09-18T16:53:09.230921Z","iopub.status.idle":"2024-09-18T16:53:09.446777Z","shell.execute_reply.started":"2024-09-18T16:53:09.230867Z","shell.execute_reply":"2024-09-18T16:53:09.445624Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Treinamento - Random Forest","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n\n# Treinar o modelo\nmodel = RandomForestClassifier()\nmodel.fit(X_train, y_train)\n\n# Fazer previsões\ny_pred = model.predict(X_test)\n\n# Calcular e exibir a acurácia\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Acurácia do modelo: {accuracy * 100:.2f}%\")\n\n# Performance do conjunto de teste\ncm = confusion_matrix(y_test, y_pred)\nplt.figure(figsize=(8, 6))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False, \n            xticklabels=['Não Saiu', 'Saiu'], yticklabels=['Não Saiu', 'Saiu'])\nplt.xlabel('Predição')\nplt.ylabel('Real')\nplt.title('Matriz de Confusão')\nplt.show()\n\n# Relatório de classificação\nprint(\"Relatório de Classificação:\")\nprint(classification_report(y_test, y_pred))\n","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:53:09.448410Z","iopub.execute_input":"2024-09-18T16:53:09.449696Z","iopub.status.idle":"2024-09-18T16:53:10.171892Z","shell.execute_reply.started":"2024-09-18T16:53:09.449635Z","shell.execute_reply":"2024-09-18T16:53:10.170219Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Treinamento - Deep Learning","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n\n# Definir o modelo\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(500, activation='relu', input_shape=(X_train.shape[1],)),\n    tf.keras.layers.Dense(500, activation='relu'),\n    tf.keras.layers.Dense(500, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.summary()\n\n# Compilar o modelo\nmodel.compile(optimizer='Adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Treinar o modelo\nepochs_hist = model.fit(X_train, y_train, epochs=100, batch_size=50)\n\n# Fazer previsões\ny_pred = model.predict(X_test)\ny_pred = (y_pred > 0.5)\n\n# Calcular e exibir a acurácia\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Acurácia do modelo: {accuracy * 100:.2f}%\")\n\n# Performance do conjunto de teste\ncm = confusion_matrix(y_test, y_pred)\nplt.figure(figsize=(8, 6))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False, \n            xticklabels=['Não Saiu', 'Saiu'], yticklabels=['Não Saiu', 'Saiu'])\nplt.xlabel('Predição')\nplt.ylabel('Real')\nplt.title('Matriz de Confusão')\nplt.show()\n\n# Relatório de classificação\nprint(\"Relatório de Classificação:\")\nprint(classification_report(y_test, y_pred))\n\n# Plotar gráfico de perda durante o treinamento\nplt.figure(figsize=(12, 6))\nplt.plot(epochs_hist.history['loss'])\nplt.title('Progresso da Perda Durante o Treinamento')\nplt.xlabel('Época')\nplt.ylabel('Perda')\nplt.legend(['Perda'])\nplt.show()\n\n# Plotar gráfico de acurácia durante o treinamento\nplt.figure(figsize=(12, 6))\nplt.plot(epochs_hist.history['accuracy'])\nplt.title('Progresso da Acurácia Durante o Treinamento')\nplt.xlabel('Época')\nplt.ylabel('Acurácia')\nplt.legend(['Acurácia'])\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:53:10.174459Z","iopub.execute_input":"2024-09-18T16:53:10.174966Z","iopub.status.idle":"2024-09-18T16:53:48.562615Z","shell.execute_reply.started":"2024-09-18T16:53:10.174914Z","shell.execute_reply":"2024-09-18T16:53:48.561531Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Treinamento: Gradient Boosting Machines (GBM)","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Dividir os dados em conjunto de treino e teste\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_normalized_df, y, test_size=0.25, random_state=42)\n\n# Treinar o modelo Gradient Boosting\ngbm_model = GradientBoostingClassifier(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42)\ngbm_model.fit(X_train, y_train)\n\n# Fazer previsões\ny_pred = gbm_model.predict(X_test)\n\n# Avaliar a acurácia\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Acurácia do modelo: {accuracy * 100:.2f}%\")\n\n# Matriz de confusão\ncm = confusion_matrix(y_test, y_pred)\nplt.figure(figsize=(8, 6))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False, \n            xticklabels=['Não saiu', 'Saiu'], yticklabels=['Não saiu', 'Saiu'])\nplt.xlabel('Predição')\nplt.ylabel('Real')\nplt.title('Matriz de Confusão - Gradient Boosting')\nplt.show()\n\n# Relatório de classificação\nprint(\"Relatório de Classificação:\")\nprint(classification_report(y_test, y_pred, target_names=['Não saiu', 'Saiu']))","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:53:48.564123Z","iopub.execute_input":"2024-09-18T16:53:48.564958Z","iopub.status.idle":"2024-09-18T16:53:49.245298Z","shell.execute_reply.started":"2024-09-18T16:53:48.564906Z","shell.execute_reply":"2024-09-18T16:53:49.244117Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Treinamento - Support Vector Machines (SVM)","metadata":{}},{"cell_type":"code","source":"from sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Dividir os dados em conjunto de treino e teste\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_normalized_df, y, test_size=0.25, random_state=42)\n\n# Treinar o modelo SVM\nsvm_model = SVC(kernel='rbf', C=1.0, gamma='scale', random_state=42)\nsvm_model.fit(X_train, y_train)\n\n# Fazer previsões\ny_pred = svm_model.predict(X_test)\n\n# Avaliar a acurácia\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Acurácia do modelo: {accuracy * 100:.2f}%\")\n\n# Matriz de confusão\ncm = confusion_matrix(y_test, y_pred)\nplt.figure(figsize=(8, 6))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False, \n            xticklabels=['Não saiu', 'Saiu'], yticklabels=['Não saiu', 'Saiu'])\nplt.xlabel('Predição')\nplt.ylabel('Real')\nplt.title('Matriz de Confusão - SVM')\nplt.show()\n\n# Relatório de classificação\nprint(\"Relatório de Classificação:\")\nprint(classification_report(y_test, y_pred, target_names=['Não saiu', 'Saiu']))","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:53:49.246911Z","iopub.execute_input":"2024-09-18T16:53:49.248227Z","iopub.status.idle":"2024-09-18T16:53:49.487621Z","shell.execute_reply.started":"2024-09-18T16:53:49.248174Z","shell.execute_reply":"2024-09-18T16:53:49.486438Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Calcular a correlação entre as variáveis numéricas\ncorrelation_matrix = df.corr(numeric_only = True)\n\n# Focar na correlação com a variável 'Attrition'\nattrition_correlation = correlation_matrix['Attrition'].sort_values(ascending=False)\n\n# Exibir a correlação da 'Attrition' com as outras variáveis\nprint(attrition_correlation)","metadata":{"execution":{"iopub.status.busy":"2024-09-18T16:53:49.489137Z","iopub.execute_input":"2024-09-18T16:53:49.490197Z","iopub.status.idle":"2024-09-18T16:53:49.505198Z","shell.execute_reply.started":"2024-09-18T16:53:49.490143Z","shell.execute_reply":"2024-09-18T16:53:49.504030Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Resultados","metadata":{}},{"cell_type":"markdown","source":"![image.png](attachment:523d8faf-b11a-4408-b898-b837804ec49a.png)","metadata":{},"attachments":{"523d8faf-b11a-4408-b898-b837804ec49a.png":{"image/png":""}}},{"cell_type":"markdown","source":"# Considerações finais","metadata":{}},{"cell_type":"markdown","source":"> **Problema de Negócio:**\n\n* Contratar e reter funcionários é um processo caro e demorado. As empresas gastam em média 7.645 dólares por nova contratação, e o processo pode levar até 52 dias. Prever a rotatividade de funcionários é crucial para reduzir esses custos e aumentar a estabilidade da equipe.\n\n> **Objetivo:**\n\n* Uma corporação multinacional deseja prever quais funcionários têm maior probabilidade de deixar a empresa, com base em dados coletados pelo departamento de RH. O objetivo é desenvolver um modelo preditivo para ajudar a equipe de RH a minimizar os custos de recrutamento e melhorar a retenção.\n\n> **Dataset**\n* https://www.kaggle.com/datasets/swatitale/hranalytics\n\n> **Resumo dos Resultados**\n* Todos os modelos atingiram mais de 85% de acurácia, indicando um bom desempenho na previsão da retenção de funcionários. O SVM apresentou a melhor performance, com 89,95% de acurácia.\n\n> **Análise dos Fatores Influentes**\n* A análise de correlação revelou que os principais fatores que influenciam a saída dos funcionários são:\n\n  * Sobrecarga de Trabalho (OverTime): A variável com maior correlação positiva, indicando que funcionários que fazem horas extras são mais propensos a sair.\n  * Satisfação no Trabalho: Funcionários com baixa satisfação tendem a deixar a empresa com mais frequência.\n  * Salário e Tempo de Empresa: Funcionários com salários mais altos e maior tempo na empresa têm menos probabilidade de sair.\n  * Distância do Trabalho: Quanto maior a distância entre a residência e o local de trabalho, maior a probabilidade de saída.\n\n**Esses insights podem ajudar a direcionar estratégias de retenção, focando em melhorar a satisfação no trabalho, ajustar remuneração e reduzir a sobrecarga de trabalho.**\n","metadata":{}},{"cell_type":"markdown","source":"\n\n","metadata":{}}]}